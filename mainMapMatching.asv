%This script is written to compute 
function mainMapMatching()
clear;
clc;
load('sanfran_abstract.mat','nodeMap','nodeMatrix','wayMap','wayNodeMatrix','edgeMatrix');
%load('sanfran_abstract.mat','nodeMap','nodeMatrix','wayMap','edgeMatrix');
%1.define road network
%1.1 define segment
%numWays=size(wayNodeMatrix,1);
% for i=1:numWays
%     nodeInds=find(wayNodeMatrix(i,:)==1);%list the nodes included in this way
%     nodes=nodeMatrix(nodeInds,:);
% end
numEdges=size(edgeMatrix,1);
%now I want to produce a sparse matrix
m=size(edgeMatrix,1);
n=size(edgeMatrix,1);
nodeInd1=edgeMatrix(:,1);
nodeInd2=edgeMatrix(:,2);
nodes1=nodeMatrix(nodeInd1,:);
nodes2=nodeMatrix(nodeInd2,:);
dis=distance(nodes1,nodes2);
graph = sparse(nodeInd1,nodeInd2,dis,m,n);
for i=1:numEdges
    nodeInd1=edgeMatrix(i,1);
    nodeInd2=edgeMatrix(i,2);
    node1=nodeMatrix(nodeInd1,:);%coordinates
    node2=nodeMatrix(nodeInd2,:);
    seg(i,:)=[node1,node2];
end

for i=1:size(seg,1)
    %segment=seg(i,:);
    line([seg(i,1),seg(i,3)],[seg(i,2),seg(i,4)]);
    hold on;
end
arc(1,:)=[0,3,1,0,0];
%define trajectory

inputfile='abboip_1';
Traces=load(inputfile);
T=Traces(:,1:2);
n=size(T,1);
% T(1,:)=[0.1,3.5];
% T(2,:)=[3,3.5];
% T(3,:)=[5,2];
% T(4,:)=[5,4.2];
% T(5,:)=[4,1];
% T(6,:)=[3,2];
plot(T(:,1),T(:,2),'r*');
hold on;
I=MapMatching(seg,arc,T,n);%return the index of chosen segments
%now use dijstra algorithm to connect unconnected roads
numEdges=length(I);

numWays=length(wayMap)-1;
%wayVelocity=zeros(numWays,1);
%wayVelocityTimes=zeros(numWays,1);
%WayVTMap=containers.Map({-1},{-1});%map node id to sequenced id
wayIDCell=cell(numWays,1);
for i=1:numEdges-1
    prevEdge=seg(I(i),:);
    currEdge=seg(I(i+1),:);
    prevTime=Traces(i,3);
    currTime=Traces(i+1,3);
    prevDis=distance(prevEdge(1:2),prevEdge(3:4));
    currDis=distance(currEdge(1:2),currEdge(3:4));
    plot([prevEdge(1),prevEdge(3)],[prevEdge(2),prevEdge(4)],'g','LineWidth',2);
    plot([currEdge(1),currEdge(3)],[currEdge(2),currEdge(4)],'g','LineWidth',2);
    prevEdgeInd=edgeMatrix(I(i),:);
    currEdgeInd=edgeMatrix(I(i+1),:);
    [node1,node2]=getClosestNodes(prevEdge,currEdge);
    sourceInd=-1;targetInd=-1;
    if node1==nodeMatrix(prevEdgeInd(1),:)
        sourceInd=prevEdgeInd(1);
    elseif node1==nodeMatrix(prevEdgeInd(2),:)
        sourceInd=prevEdgeInd(2);
    else
        fprintf('node error\n');
    end
    if node2==nodeMatrix(currEdgeInd(1),:)
        targetInd=currEdgeInd(1);
    elseif node2==nodeMatrix(currEdgeInd(2),:)
        targetInd=currEdgeInd(2);
    else
        fprintf('node error\n');
    end
    [path cost] = dijkstra(graph,sourceInd,targetInd);
    dis=cost+(prevDis+currDis)/2;
    velocity=dis/(currTime-prevTime);
    %find the road IDs corresponding to the node ids on this interval, and
    %label this road as this velocity
    %nodesOfInterval=[sourceInd,path,targetInd];
    nodesOfInterval=path;
    nodesOfInterval(length(path)+1)=sourceInd;
    nodesOfInterval(length(path)+2)=targetInd;

    wayIDs=[];
    ways=wayNodeMatrix(:,nodesOfInterval);
    [rows,cols,vals]=find(ways==1);
%     for col=1:size(ways,2)%how many ways concerned
%         wayIDs=find(ways(:,col)==1);
%     end
    wayIDs=rows;
    correctWayIDs=computeEleNum(wayIDs);
    wayIDs=correctWayIDs;
    %wayVelocity(correctWayIDs)=wayVelocity(correctWayIDs)+velocity;%all these roads are labeled with such a velocity
    %wayVelocityTimes(correctWayIDs)=wayVelocityTimes(correctWayIDs)+1;
    vt.velocity=velocity;
    vt.startTime=prevTime;
    vt.endTime=currTime;
    
    
    for k=1:length(wayIDs)
        wid=wayIDs(k);
        if isempty(wayIDCell{wid})
            wayIDCell{wid}=[vt];
        else
            temp=wayIDCell{wid};
            ll=length(temp);
            temp(ll+1)=vt;
            wayIDCell{wid}=temp;
        end
    end
    %VeloTimeMap(
    plot(nodeMatrix(path,1),nodeMatrix(path,2),'g','LineWidth',2);
end
% mapSeg=seg(I,:);
% for i=1:length(I) 
%     plot([mapSeg(i,1),mapSeg(i,3)],[mapSeg(i,2),mapSeg(i,4)],'g','LineWidth',4);
% end
hold off;
save('wayIDCell.mat','wayIDCell');
saveas(gcf,[inputfile, '.png']);
end


